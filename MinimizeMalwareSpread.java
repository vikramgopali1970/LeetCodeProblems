package LeetProblem;

import java.util.Arrays;

public class MinimizeMalwareSpread {
    private void dfs(int[][] g,int[] c,int n, int color){
        c[n] = color;
        for(int i=0;i<g.length;i++){
            if(g[n][i] == 1 && c[i]==-1){
                this.dfs(g,c,i,color);
            }
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int[] cArr = new int[graph.length];
        Arrays.fill(cArr,-1);
        int color = 0;
        for(int i=0;i<graph.length;i++){
            if(cArr[i] == -1){
                this.dfs(graph,cArr,i,color++);
            }
        }
        int[] freq = new int[graph.length];
        for(int i=0;i<freq.length;i++){
            freq[cArr[i]]++;
        }
        Arrays.sort(initial);
        int res = initial[0];
        for(int i=1;i<initial.length;i++){
            if(cArr[res] != cArr[initial[i]]){
                if(freq[cArr[res]] < freq[cArr[initial[i]]]){
                    res = initial[i];
                }
            }
        }
        return res;
    }
}
